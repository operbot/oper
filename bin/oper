#!/usr/bin/env python3
# This file is placed in the Public Domain.
# pylint: disable=E1101,E0611,C0115,C0116,C0413,C0411,W0406


"object programming runtime"


import importlib
import os
import readline
import signal
import sys
import termios
import time


sys.path.insert(0, os.getcwd())


from op import Db, Wd, elapsed, fntime, keys, printable, update, wait
from op.dbs import all


from oper import Client, Command, Event, docmd, parse, scan, scandir
from oper.run import Cfg


Wd.workdir = os.path.expanduser("~/.oper")
Wd.moddir = os.path.join(Wd.workdir, "mod")


class CLI(Client):

    @staticmethod
    def raw(txt):
        print(txt)


class Console(CLI):

    @staticmethod
    def announce(txt):
        pass

    @staticmethod
    def handle(event):
        Client.handle(event)
        event.wait()

    def poll(self):
        event = Event()
        event.txt = input("> ")
        event.orig = repr(self)
        return event


def banner(cfg):
    print(
          "OPER started at %s %s" % (
                                     time.ctime(time.time()).replace("  ", " "),
                                     printable(cfg, "debug,verbose")
                                    )
         )


def daemon():
    pid = os.fork()
    if pid != 0:
        os._exit(0)
    os.setsid()
    os.umask(0)
    sis = open("/dev/null", 'r')
    sos = open("/dev/null", 'a+')
    ses = open("/dev/null", 'a+')
    os.dup2(sis.fileno(), sys.stdin.fileno())
    os.dup2(sos.fileno(), sys.stdout.fileno())
    os.dup2(ses.fileno(), sys.stderr.fileno())


def fnd(event):
    if len(event.args) == 0:
        print("opr fnd workdir [type] [selector]")
        return
    if len(event.args) == 1:
        Wd.workdir = event.args[0]
        res = ",".join({x.split(".")[-1].lower() for x in Wd.types()})
        if res:
            print(res)
        else:
            print("no types yet.")
        return
    Wd.workdir = event.args[0]
    otype = event.args[1]
    dbs = Db()
    res = list(all(otype))
    nrs = 0
    for fnm, obj in res:
        txt = "%s %s %s" % (
                            str(nrs),
                            printable(obj, keys(obj)),
                            elapsed(time.time()-fntime(fnm))
                           )
        nrs += 1
        print(txt)
    if not nrs:
        print("no result")


def hup(_sig, _frame):
    print("signal 15 called")
    sys.stdout.flush()


def importer(pname, mname):
    fqn = "%s.%s" % (pname, mname)
    mod = importlib.import_module(fqn, pname)
    scan(mod)


def isopt(ostr):
    for opt in ostr:
        if opt in Cfg.opts:
            return True
    return False


def wrap(func):
    fds = sys.stdin.fileno()
    gotterm = True
    try:
        old = termios.tcgetattr(fds)
    except termios.error:
        gotterm = False
    readline.redisplay()
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        print("")
    finally:
        if gotterm:
            termios.tcsetattr(fds, termios.TCSADRAIN, old)


def main():
    signal.signal(signal.SIGHUP, hup)
    Command.add(fnd)
    txt = ' '.join(sys.argv[1:])
    cfg = parse(txt)
    update(Cfg, cfg)
    scandir(Wd.moddir, importer)
    if cfg.txt:
        cli = CLI()
        docmd(cli, cfg.otxt)
        return
    if isopt("d"):
        daemon()
    if isopt("ci"):
        banner(cfg)
    if isopt("c") and not isopt("d"):
        csl = Console()
        csl.start()
        csl.forever()
    if isopt("d"):
        wait()


wrap(main)
